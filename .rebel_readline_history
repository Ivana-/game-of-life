1560182952168:(for [r (map #(+ % 10) [-1,0,1]) c (map #(+ % 100) [-1,0,1])] [r c])
1560183107843:(for [r (map #(+ % 10) [-1,0,1]) c (map #(+ % 100) [-1,0,1]) :when (not= 0 r c)] [r c])
1560183143525:(for [r (map #(+ % 10) [-1,0,1]) c (map #(+ % 100) [-1,0,1]) :when-not (= 0 r c)] [r c])
1560183159331:(for [r (map #(+ % 10) [-1,0,1]) c (map #(+ % 100) [-1,0,1]) :when (not (= 0 r c))] [r c])
1560183250788:(for [r (map #(+ % 10) [-1,0,1]) c (map #(+ % 100) [-1,0,1]) :when (not (= 0 r ))] [r c])
1560183273076:(for [r (map #(+ % 10) [-1,0,1]) c (map #(+ % 100) [-1,0,1]) :when (> x 0)] [r c])
1560183287728:(for [r (map #(+ % 10) [-1,0,1]) c (map #(+ % 100) [-1,0,1]) :when (> r 0)] [r c])
1560183530704:(for [dr [-1,0,1] dc [-1,0,1] :when (not (= 0 dr dc))] [(+ 10 dr) (+ 100 dc)])
1560195582654:(mod -1 3)
1560195618577:(mod -2 3)
1560196144079:(map [[1 2] [2 33] [4 77]])
1560196176321:(hashmap [[1 2] [2 33] [4 77]])
1560196208778:(into {} [[1 2] [2 33] [4 77]])
1560198118066:(pos? nil)
1560198126520:(> nil 0)
1560198140838:(> true 0)
1560198155957:(pos? true)
1560198168872:(> nil 0)
1560198176612:(inc nil)
1560270156828:(min 1 2 3)
1560270497644:(/ 10 3\n   ))
1560270503471:(/ 10 3)
1560270516698:(int (/ 10 3))
1560270525614:(int (/ 11\n        3))
1560270539407:(js/floor\n (/ 10 3))
1560270551395:(js/Math.floor\n (/ 10 3))
1560300079962:(js/parseFloat "")
1560300104793:(js/isNaN (js/parseFloat ""))
1560300754742:(min 10 "2")
1560374008181:(cons 1 nil)
1560374170490:(rest nil)
1560378331544:(zero? 0)
